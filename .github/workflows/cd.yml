name: CD Pipeline

on:
  push:
    branches: [ main ]
    tags: [ 'v*.*.*' ]

jobs:
  prepare:
    name: Prepare Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version.outputs.version }}
    steps:
      - name: Get Version
        id: get-version
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            echo "version=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
          else
            echo "version=$(date +'%Y%m%d')-${GITHUB_SHA::8}" >> $GITHUB_OUTPUT
          fi

  publish:
    name: Publish Images
    needs: prepare
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [ecommerce, store, exchange, fidelity]
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build and Push
        uses: docker/build-push-action@v4
        with:
          context: ./services/${{ matrix.service }}
          push: true
          tags: |
            your-org/${{ matrix.service }}-service:latest
            your-org/${{ matrix.service }}-service:${{ needs.prepare.outputs.version }}
          cache-from: type=registry,ref=your-org/${{ matrix.service }}-service:buildcache
          cache-to: type=registry,ref=your-org/${{ matrix.service }}-service:buildcache,mode=max

  deploy-staging:
    name: Deploy to Staging
    needs: [prepare, publish]
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - uses: actions/checkout@v3
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: Update ECS Services
        run: |
          for service in ecommerce store exchange fidelity; do
            aws ecs update-service \
              --cluster staging-cluster \
              --service $service \
              --force-new-deployment
          done
      
      - name: Wait for Deployment
        run: |
          for service in ecommerce store exchange fidelity; do
            aws ecs wait services-stable \
              --cluster staging-cluster \
              --services $service
          done

  integration-tests-staging:
    name: Integration Tests (Staging)
    needs: deploy-staging
    runs-on: ubuntu-latest
    environment: staging
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
      
      - name: Run Integration Tests
        run: |
          cd services
          mvn verify -P integration-tests -Dtest.env=staging
        env:
          TEST_HOST: ${{ secrets.STAGING_HOST }}

  deploy-production:
    name: Deploy to Production
    needs: integration-tests-staging
    runs-on: ubuntu-latest
    environment: 
      name: production
      url: https://your-production-url.com
    steps:
      - uses: actions/checkout@v3
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      
      - name: Update ECS Services
        run: |
          for service in ecommerce store exchange fidelity; do
            aws ecs update-service \
              --cluster production-cluster \
              --service $service \
              --force-new-deployment
          done
      
      - name: Wait for Deployment
        run: |
          for service in ecommerce store exchange fidelity; do
            aws ecs wait services-stable \
              --cluster production-cluster \
              --services $service
          done

  notify:
    name: Send Notifications
    needs: [deploy-production]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Notify Slack
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          fields: repo,message,commit,author,action,eventName,ref,workflow,job,took
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
